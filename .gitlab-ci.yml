###################
# Global Settings #
###################

stages:
  - Env
  - Canary
  - Build
  - Test
  - Tutorials
  - Apps

variables:
  GET_SOURCES_ATTEMPTS: 10
  ARTIFACT_DOWNLOAD_ATTEMPTS: 10
  RESTORE_CACHE_ATTEMPTS: 10
  GIT_STRATEGY: fetch
  GLOBAL_CI_VARIABLE: "global_ci_value"
  CI_JOB_NAME_TMP: ${CI_JOB_NAME}
  CI_JOB_NAME_NOSTAGE: ${CI_JOB_NAME_TMP#*:}
  #CI_DEBUG_TRACE: "true"
  http_proxy: "http://proxyout.lanl.gov:8080"
  https_proxy: "http://proxyout.lanl.gov:8080"
  ftp_proxy: "http://proxyout.lanl.gov:8080"
  no_proxy: "lanl.gov"
  SPACK_ROOT: /home/gitlab-runner/ci-spack/spack
  DEPS_LOCK: /home/gitlab-runner/ci-spack/deps.pid
  lock_fd: 314
  GIT_SUBMODULE_STRATEGY: recursive
  CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
  CCACHE_UMASK: 000
  DISTRO: "fedora"
  RUNTIME: "mpi"
  BUILD_TYPE: "Debug"
  CC: "gcc"
  CXX: "g++"
  CXXFLAGS: "-Werror -Wno-return-type -Wno-deprecated-declarations"
  IGNORE_NOCI: "FALSE"
before_script:
  - echo ${CI_JOB_NAME_NOSTAGE%.*}-${CI_COMMIT_REF_SLUG}
  - '[ "$(git rev-parse origin/$CI_COMMIT_REF_NAME)" != "$CI_COMMIT_SHA" ] && curl --header "PRIVATE-TOKEN: $MY_CI_API_TOKEN" -X POST https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/cancel'
  #- find . -name "`basename cinch`" | grep "cinch\$" | xargs rm -fr
  - |
    if [[ ${CI_RUNNER_TAGS} = "shell" ]];
    then
      module load python/3.5.1;
      module load cmake/3.12.4;
      module load gcc/7.3.0;
      source ${SPACK_ROOT}/share/spack/setup-env.sh || /bin/true;
      module list;
    fi

##########################
# Build Matrix Variables #
##########################

.distro_centOS: &distro_centOS
  DISTRO: "centOS"

.distro_fedora: &distro_fedora
  DISTRO: "fedora"

.distro_fedora_mpich: &distro_fedora_mpich
  DISTRO: "fedora_mpich"

.distro_ubuntu: &distro_ubuntu
  DISTRO: "ubuntu"

.distro_ubuntu_mpich: &distro_ubuntu_mpich
  DISTRO: "ubuntu_mpich"

.runtime_mpi: &runtime_mpi
  RUNTIME: "mpi"

.runtime_legion: &runtime_legion
  RUNTIME: "legion"

.runtime_hpx: &runtime_hpx
  RUNTIME: "hpx"

.compiler_gcc: &compiler_gcc
  CC: "gcc"
  CXX: "g++"

.compiler_clang: &compiler_clang
  CC: "clang"
  CXX: "clang++"

.compiler_intel: &compiler_intel
  CC: "icc"
  CXX: "icpc"

.buildtype_debug: &buildtype_debug
  BUILD_TYPE: "Debug"

.buildtype_release: &buildtype_release
  BUILD_TYPE: "Release"

.ignore_noci: &ignore_noci
  IGNORE_NOCI: "TRUE"

#######################
# Templates & Anchors #
#######################

.general_template: &general_def
  retry: 2

.cache_template: &cache_def
  cache:
    #key: ${CI_JOB_NAME_NOSTAGE%.*}-${CI_COMMIT_REF_SLUG}
    #key: ${CI_COMMIT_REF_SLUG}
    key: ${DISTRO}-${RUNTIME}-${CC}
    paths:
      - ccache/

.artifacts_template: &artifacts_def
  artifacts:
    name: "${CI_COMMIT_REF_SLUG}-${CI_JOB_NAME}"
    paths:
      - ${CI_PROJECT_DIR}/build #/builds/next-generation-codes/laristra/flecsi/build
    when: always
  dependencies: []

.shell_template: &shell_def
  tags: &shell_tags
    - shell

.docker_template: &docker_def
  tags: &docker_tags
    - docker
  image:
    name: laristra/flecsi-third-party:${DISTRO} #user: flecsi

.batch_template: &batch_def
  tags: &batch_tags
    - darwin-slurm

.job_template: &job_def
  <<: *general_def
  <<: *cache_def

#############
# Env Stage #
#############

# Christoph: maybe you could fix the locking errors while you are at it?
.env_template: &env_def
  <<: *job_def
  stage: Env
  script: &env_script
    - mkdir -p build
    - cd ${CI_PROJECT_DIR}/build/
    - exec {lock_fd}>${DEPS_LOCK}
    - |
      if [[ ${I_WANT_TO_CLEAN_UP} ]];
      then
        rm -rf ${SPACK_ROOT}/*;
      fi
#    - flock -n "${lock_fd}"
    - |
      if [[ ! -d ${SPACK_ROOT} ]];
      then
        git init --shared=group ${SPACK_ROOT};
        git -c ${SPACK_ROOT} pull https://github.com/spack/spack develop;
      fi
    - source ${SPACK_ROOT}/share/spack/setup-env.sh
    - spack repo rm laristra_flecsi #TODO this assumes laristra_flecsi is the namespace
    - spack repo add ${CI_PROJECT_DIR}/spack-repo
    - spack repo list
    - spack install --only=dependencies flecsi~graphviz%gcc@7.3.0 backend=mpi
    - spack install --only=dependencies flecsi~graphviz%gcc@7.3.0 backend=legion
#    - flock -u "${lock_fd}"

###############
# Build Stage #
###############

.build: &build_def
  <<: *job_def
  <<: *artifacts_def
  stage: Build
  script: &build_script |-
    echo 'Start building'
    ccache -z
    nproc
    # git submodule init
    # git config submodule.cinch.url https://github.com/laristra/cinch.git
    # git submodule update --init --recursive
    mkdir -p build
    cd ${CI_PROJECT_DIR}/build/
    cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DFLECSI_RUNTIME_MODEL=$RUNTIME \
          ${MINIMAL:+-DCMAKE_DISABLE_FIND_PACKAGE_METIS=ON} \
          -DFLECSI_ENABLE_TUTORIAL=$([ "$RUNTIME" = "hpx" ] && echo OFF || echo ON) \
          -DENABLE_FLECSTAN=$([ "$CI_RUNNER_TAGS" = "shell" ] && echo OFF || echo ON) \
          -DENABLE_FLOG=ON \
          -DENABLE_DOXYGEN=ON \
          -DENABLE_DOCUMENTATION=OFF \
          -DENABLE_COVERAGE_BUILD=ON \
          ..
    make -k VERBOSE=1 -j2 -l80
    mkdir -p install
    make install DESTDIR=install
    if [[ ${CI_RUNNER_TAGS} = "docker" ]];
    then
      sudo make install;
    fi
    ccache -s

##############
# Test Stage #
##############

.test: &test_def
  <<: *job_def
  stage: Test
  dependencies:
    #- "build:${CI_JOB_NAME#*:}"
    - .build_template
  script: &test_script |-
    echo 'Start testing'
    cd ${CI_PROJECT_DIR}/build/
    make test ARGS="-V"
    gcovr .

################
# Format Stage #
################

.format: &format_def
  <<: *job_def
  stage: Format
  dependencies:
    #- "build:${CI_JOB_NAME#*:}"
    - .build_template
  script: &format_script |-
    echo 'Start format checking'
    cd ${CI_PROJECT_DIR}/build/
    clang-format -version
    make format && git diff --exit-code --ignore-submodules

###################
# Tutorials Stage #
###################

.tutorials: &tutorials_def
  <<: *job_def
  stage: Tutorials
  dependencies:
    #- "build:${CI_JOB_NAME#*:}"
    - .build_template
  script: &tutorials_script
    - echo 'Start tutorials checking'
    - cd ${CI_PROJECT_DIR}/build/
    - sudo make install
    - source /usr/local/bin/flecsi-tutorial.sh
    - cd ../flecsi-tutorial

    # Tutorial 00-driver
    - cd 00-driver
    - flecsit compile driver.cc
    - ./driver

    # Tutorial 01-tasks
    - cd ../01-tasks
    - flecsit compile tasks.cc
    - ./tasks

##############
# Apps Stage #
##############

.apps: &apps_def
  <<: *job_def
  stage: Apps
  dependencies:
    #- "build:${CI_JOB_NAME#*:}"
    - .build_template
  script: &apps_script
    - echo 'Start apps checking'
    - cd ${CI_PROJECT_DIR}/build/
    - git clone --recursive https://github.com/laristra/flecsale.git
    - cd flecsale/flecsi
    - git fetch
    - git checkout ${CI_COMMIT_REF_NAME}
    - git submodule update --init --recursive
    - cd ../
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
        -DFLECSI_RUNTIME_MODEL=mpi \
        -DENABLE_UNIT_TESTS=ON \
        ..
    - make -j2 || make VERBOSE=1
    - make test ARGS="CTEST_OUTPUT_ON_FAILURE=1"

################
# Canary Stage #
################

.canary: &canary_def
  <<: *job_def
  stage: Canary
  script:
    - *build_script
    - *test_script
    - *format_script

############
# Env Jobs #
############

env:
  extends: .env_template
  <<: *shell_def

###############
# Canary Jobs #
###############

canary:fedora_mpi:
  extends: .canary
  <<: *docker_def
  variables:
    <<: *distro_fedora
    <<: *runtime_mpi

canary:fedora_legion:
  extends: .canary
  <<: *docker_def
  variables:
    <<: *distro_fedora
    <<: *runtime_legion

canary:fedora_hpx:
  extends: .canary
  <<: *docker_def
  variables:
    <<: *distro_fedora
    <<: *runtime_hpx
  allow_failure: true 

#canary:centOS_mpi:
#  extends: .canary
#  <<: *shell_def
#  variables:
#    <<: *distro_centOS
#    <<: *runtime_mpi

##############
# Build Jobs #
##############

build:ubuntu_mpi:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:ubuntu_mpi_release:
  extends: build:ubuntu_mpi
  variables:
    <<: *buildtype_release

build:ubuntu_mpi_clang:
  extends: build:ubuntu_mpi
  variables:
    <<: *compiler_clang

build:ubuntu_mpi_clang_release:
  extends: build:ubuntu_mpi_clang
  variables:
    <<: *buildtype_release

build:ubuntu_mpich_mpi:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_ubuntu_mpich
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:ubuntu_mpich_mpi_release:
  extends: build:ubuntu_mpich_mpi
  variables:
    <<: *buildtype_release

build:ubuntu_mpich_mpi_clang:
  extends: build:ubuntu_mpich_mpi
  variables:
    <<: *compiler_clang

build:ubuntu_mpich_mpi_clang_release:
  extends: build:ubuntu_mpich_mpi_clang
  variables:
    <<: *buildtype_release

.build:fedora_mpi:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_fedora
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:fedora_mpi_release:
  extends: .build:fedora_mpi
  variables:
    <<: *buildtype_release

build:fedora_mpi_clang:
  extends: .build:fedora_mpi
  variables:
    <<: *compiler_clang

build:fedora_mpi_clang_release:
  extends: build:fedora_mpi_clang
  variables:
    <<: *buildtype_release

build:fedora_mpich_mpi:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_fedora_mpich
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:fedora_mpich_mpi_release:
  extends: build:fedora_mpich_mpi
  variables:
    <<: *buildtype_release

build:fedora_mpich_mpi_clang:
  extends: build:fedora_mpich_mpi
  variables:
    <<: *compiler_clang

build:fedora_mpich_mpi_clang_release:
  extends: build:fedora_mpich_mpi_clang
  variables:
    <<: *buildtype_release

build:ubuntu_legion:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:ubuntu_legion_release:
  extends: build:ubuntu_legion
  variables:
    <<: *buildtype_release

build:ubuntu_legion_clang:
  extends: build:ubuntu_legion
  variables:
    <<: *compiler_clang

build:ubuntu_legion_clang_release:
  extends: build:ubuntu_legion_clang
  variables:
    <<: *buildtype_release

build:ubuntu_mpich_legion:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_ubuntu_mpich
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:ubuntu_mpich_legion_release:
  extends: build:ubuntu_mpich_legion
  variables:
    <<: *buildtype_release

build:ubuntu_mpich_legion_clang:
  extends: build:ubuntu_mpich_legion
  variables:
    <<: *compiler_clang

build:ubuntu_mpich_legion_clang_release:
  extends: build:ubuntu_mpich_legion_clang
  variables:
    <<: *buildtype_release

.build:fedora_legion:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_fedora
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:fedora_legion_release:
  extends: .build:fedora_legion
  variables:
    <<: *buildtype_release

build:fedora_legion_clang:
  extends: .build:fedora_legion
  variables:
    <<: *compiler_clang

build:fedora_legion_clang_release:
  extends: build:fedora_legion_clang
  variables:
    <<: *buildtype_release

build:fedora_mpich_legion:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_fedora_mpich
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script

build:fedora_mpich_legion_release:
  extends: build:fedora_mpich_legion
  variables:
    <<: *buildtype_release

build:fedora_mpich_legion_clang:
  extends: build:fedora_mpich_legion
  variables:
    <<: *compiler_clang

build:fedora_mpich_legion_clang_release:
  extends: build:fedora_mpich_legion_clang
  variables:
    <<: *buildtype_release

build:ubuntu_hpx:
  extends: .build
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_hpx
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *build_script
  allow_failure: true

build:ubuntu_hpx_clang:
  extends: build:ubuntu_hpx
  variables:
    <<: *compiler_clang

build:centOS_mpi_intel:
  extends: .build
  <<: *shell_def
  variables:
    <<: *distro_centOS
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_intel
  script:
    - *build_script

build:centOS_legion_intel:
  extends: .build
  <<: *shell_def
  variables:
    <<: *distro_centOS
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_intel
  script:
    - *build_script

#############
# Test Jobs #
#############

test:ubuntu_mpi:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:ubuntu_mpi

test:ubuntu_mpi_release:
  extends: test:ubuntu_mpi
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_mpi_release

test:ubuntu_mpi_clang:
  extends: test:ubuntu_mpi
  variables:
    <<: *compiler_clang
  dependencies:
    - build:ubuntu_mpi_clang

test:ubuntu_mpi_clang_release:
  extends: test:ubuntu_mpi_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_mpi_clang_release

test:ubuntu_mpich_mpi:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_ubuntu_mpich
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:ubuntu_mpich_mpi

test:ubuntu_mpich_mpi_release:
  extends: test:ubuntu_mpich_mpi
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_mpich_mpi_release

test:ubuntu_mpich_mpi_clang:
  extends: test:ubuntu_mpich_mpi
  variables:
    <<: *compiler_clang
  dependencies:
    - build:ubuntu_mpich_mpi_clang

test:ubuntu_mpich_mpi_clang_release:
  extends: test:ubuntu_mpich_mpi_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_mpich_mpi_clang_release

.test:fedora_mpi:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_fedora
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:fedora_mpi

test:fedora_mpi_release:
  extends: .test:fedora_mpi
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_mpi_release

test:fedora_mpi_clang:
  extends: .test:fedora_mpi
  variables:
    <<: *compiler_clang
  dependencies:
    - build:fedora_mpi_clang

test:fedora_mpi_clang_release:
  extends: test:fedora_mpi_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_mpi_clang_release

test:fedora_mpich_mpi:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_fedora_mpich
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:fedora_mpich_mpi

test:fedora_mpich_mpi_release:
  extends: test:fedora_mpich_mpi
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_mpich_mpi_release

test:fedora_mpich_mpi_clang:
  extends: test:fedora_mpich_mpi
  variables:
    <<: *compiler_clang
  dependencies:
    - build:fedora_mpich_mpi_clang

test:fedora_mpich_mpi_clang_release:
  extends: test:fedora_mpich_mpi_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_mpich_mpi_clang_release

test:ubuntu_legion:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:ubuntu_legion

test:ubuntu_legion_release:
  extends: test:ubuntu_legion
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_legion_release

test:ubuntu_legion_clang:
  extends: test:ubuntu_legion
  variables:
    <<: *compiler_clang
  dependencies:
    - build:ubuntu_legion_clang

test:ubuntu_legion_clang_release:
  extends: test:ubuntu_legion_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_legion_clang_release

test:ubuntu_mpich_legion:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_ubuntu_mpich
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:ubuntu_mpich_legion

test:ubuntu_mpich_legion_release:
  extends: test:ubuntu_mpich_legion
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_mpich_legion_release

test:ubuntu_mpich_legion_clang:
  extends: test:ubuntu_mpich_legion
  variables:
    <<: *compiler_clang
  dependencies:
    - build:ubuntu_mpich_legion_clang

test:ubuntu_mpich_legion_clang_release:
  extends: test:ubuntu_mpich_legion_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:ubuntu_mpich_legion_clang_release

.test:fedora_legion:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_fedora
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:fedora_legion

test:fedora_legion_release:
  extends: .test:fedora_legion
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_legion_release

test:fedora_legion_clang:
  extends: .test:fedora_legion
  variables:
    <<: *compiler_clang
  dependencies:
    - build:fedora_legion_clang

test:fedora_legion_clang_release:
  extends: test:fedora_legion_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_legion_clang_release

test:fedora_mpich_legion:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_fedora_mpich
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:fedora_mpich_legion

test:fedora_mpich_legion_release:
  extends: test:fedora_mpich_legion
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_mpich_legion_release

test:fedora_mpich_legion_clang:
  extends: test:fedora_mpich_legion
  variables:
    <<: *compiler_clang
  dependencies:
    - build:fedora_mpich_legion_clang

test:fedora_mpich_legion_clang_release:
  extends: test:fedora_mpich_legion_clang
  variables:
    <<: *buildtype_release
  dependencies:
    - build:fedora_mpich_legion_clang_release

test:ubuntu_hpx:
  extends: .test
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_hpx
    <<: *buildtype_debug
    <<: *compiler_gcc
  script:
    - *test_script
  dependencies:
    - build:ubuntu_hpx
  allow_failure: true

test:ubuntu_hpx_clang:
  extends: test:ubuntu_hpx
  variables:
    <<: *compiler_clang
  dependencies:
    - build:ubuntu_hpx_clang

test:ubuntu_mpi.ignoreNoCI:
  extends: test:ubuntu_mpi
  variables:
    <<: *ignore_noci
  dependencies:
    - build:ubuntu_mpi
  allow_failure: true

test:ubuntu_legion.ignoreNoCI:
  extends: test:ubuntu_legion
  variables:
    <<: *ignore_noci
  dependencies:
    - build:ubuntu_legion
  allow_failure: true

test:ubuntu_hpx.ignoreNoCI:
  extends: test:ubuntu_hpx
  variables:
    <<: *ignore_noci
  dependencies:
    - build:ubuntu_hpx
  allow_failure: true

test:centOS_mpi_intel:
  extends: .test
  <<: *shell_def
  variables:
    <<: *distro_centOS
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_intel
  script:
    - *test_script
  dependencies:
    - build:centOS_mpi_intel

test:centOS_legion_intel:
  extends: .test
  <<: *shell_def
  variables:
    <<: *distro_centOS
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_intel
  script:
    - *test_script
  dependencies:
    - build:centOS_legion_intel

##################
# Tutorials Jobs #
##################

tutorials:ubuntu_mpi:
  extends: .tutorials
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  dependencies:
    - build:ubuntu_mpi

tutorials:ubuntu_legion:
  extends: .tutorials
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  dependencies:
    - build:ubuntu_legion

#############
# Apps Jobs #
#############

apps:ubuntu_mpi:
  extends: .apps
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
  dependencies:
    - build:ubuntu_mpi

apps:ubuntu_legion:
  extends: .apps
  <<: *docker_def
  variables:
    <<: *distro_ubuntu
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
  dependencies:
    - build:ubuntu_legion

#######################################################################################
#######################################################################################
#######################################################################################


